{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/slaither/Documentos/NLW_4/moveit/src/contexts/ChallengesContext.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createContext, useEffect, useState } from 'react';\nimport Cookies from \"js-cookie\";\nimport challenges from \"../../challenges.json\";\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  var _rest$level;\n\n  let {\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const {\n    0: level,\n    1: setLevel\n  } = useState((_rest$level = rest.level) !== null && _rest$level !== void 0 ? _rest$level : 1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio ðŸŽ‰', {\n        body: `Valendo ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      experienceToNextLevel,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/slaither/Documentos/NLW_4/moveit/src/contexts/ChallengesContext.tsx"],"names":["createContext","useEffect","useState","Cookies","challenges","ChallengesContext","ChallengesProvider","children","rest","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from 'react'\nimport Cookies from \"js-cookie\";\nimport challenges from \"../../challenges.json\";\n\ninterface Challenge {\n  type: \"body\" | \"eye\";\n  description: string;\n  amount: number;\n}\n\ninterface ChallengesContextData {\n  level: number;\n  currentExperience: number;\n  experienceToNextLevel: number;\n  challengesCompleted: number;  \n  activeChallenge: Challenge;\n  levelUp: () => void;\n  startNewChallenge: () => void;\n  resetChallenge: () => void;\n  completeChallenge: () => void;\n}\n\ninterface ChallengesProviderProps {\n  children: ReactNode;\n  level: number;\n  currentExperience: number;\n  challengesCompleted: number;  \n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\nexport function ChallengesProvider(\n  { children, \n    ...rest\n  }: ChallengesProviderProps) {\n  const [level, setLevel] = useState(rest.level ?? 1);\n  const [currentExperience, setCurrentExperience] = useState(0);\n  const [challengesCompleted, setChallengesCompleted] = useState(0);\n\n  const [activeChallenge, setActiveChallenge] = useState(null);\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\n\n  useEffect(() => {\n    Notification.requestPermission()\n  }, [ ])\n\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));    \n  },[level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n    \n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n\n    setActiveChallenge(challenge)\n\n    new Audio('/notification.mp3').play();\n\n    if(Notification.permission === 'granted') {\n      new Notification('Novo desafio ðŸŽ‰', { \n        body: `Valendo ${challenge.amount}xp!`\n      })\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if(!activeChallenge) {\n      return;\n    }\n\n    const { amount } = activeChallenge;\n\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n\n      finalExperience = finalExperience - experienceToNextLevel;\n\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1)\n\n  }\n\n  return (\n    <ChallengesContext.Provider\n      value={{\n        level,\n        currentExperience,\n        challengesCompleted,\n        experienceToNextLevel,\n        levelUp,\n        startNewChallenge,\n        activeChallenge,\n        resetChallenge,\n        completeChallenge,\n      }}\n    >\n      {children}\n    </ChallengesContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}